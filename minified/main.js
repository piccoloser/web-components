export function addElement(n, e = {}) { return Object.assign(document.createElement(n), e) } class Color { constructor(n, e, t, o) { [this.r, this.g, this.b, this.a] = [n, e, t, o] } get rgba() { return `rgba(${this.r}, ${this.g}, ${this.b}, ${this.a})` } get rgbArray() { return Array.from("rgb").map((n => this[n])) } brightness(n) { return new Color(...this.rgbArray.map((e => Math.max(0, e + n))), this.a) } opacity(n) { return this.a += n, this.a > 1 && (this.a = 1), this.a < 0 && (this.a = 0), this } static fromComputedStyle(n, e = null, t = "background") { let o = getComputedStyle(n)[t]; "none" == o && (o = e); const i = o.match(/[\d\.]+/g); let [r, a, s, d] = i ? i.map(Number) : [0, 0, 0, 0]; return d || (d = 1), new Color(r, a, s, d) } } class ModalDialog extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }), this.wrapper = addElement("div", { id: "wrapper" }); this.bgColor = Color.fromComputedStyle(this, "rgba(200, 200, 200, 1)"), this.bodyBgColor = this.bgColor.rgba, this.titleBgColor = this.bgColor.brightness(-20).rgba; const n = addElement("style", { textContent: `\n                * {\n                    margin: 0;\n                    padding: 0;\n                    box-sizing: border-box;\n                }\n\n                #backdrop {\n                    position: fixed;\n                    top: 0;\n                    left: 0;\n                    right: 0;\n                    bottom: 0;\n                    background-color: #0005;\n                }\n\n                #btn-close {\n                    position: absolute;\n                    display: flex;\n                    justify-content: center;\n                    top: 50%;\n                    right: .35rem;\n                    transform: translateY(-50%);\n                    width: 2rem;\n                    height: 2rem;\n                    cursor: pointer;\n\n                    --bg: #000;\n                }\n                #btn-close:hover {\n                    --bg: #222;\n                }\n                #btn-close::before, #btn-close::after {\n                    content: '';\n                    display: block;\n                    position: absolute;\n                    width: 5px;\n                    height: 100%;\n                    transform: rotate(-45deg);\n                    border-radius: 3px;\n                    background-color: var(--bg);\n                }\n                #btn-close::after {\n                    transform: rotate(45deg);\n                }\n\n                #dialog-box {\n                    display: flex;\n                    flex-direction: column;\n                    align-items: center;\n                    overflow: hidden;\n                    position: relative;\n                    z-index: 1;\n\n                    min-width: 320px;\n                    max-width: 900px;\n                    max-height: 600px;\n\n                    border-radius: 5px;\n\n                    color: ${this.style.getPropertyValue("color") || "#000"};\n                }\n\n                #dialog-title {\n                    position: relative;\n                    display: block;\n                    width: 100%;\n                    padding: .5rem 4rem;\n                    text-align: center;\n                    background-color: ${this.titleBgColor || "#888"};\n                }\n\n                #dialog-body {\n                    display: block;\n\n                    width: 100%;\n                    height: 100%;\n                    padding: 2rem;\n\n                    background: ${this.bodyBgColor || "#aaa"};\n                }\n\n                #wrapper {\n                    position: fixed;\n                    top: 0; left: 0;\n                    z-index: 2;\n\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n\n                    width: 100vw;\n                    height: 100vh;\n                }\n            ` }); this.shadowRoot.append(n, this.wrapper), this.display("Title", "This is the body of my message.") } close() { Array.from(this.wrapper.children).forEach((n => n.remove())), this.wrapper.style.display = "none" } display(n = "Dialog", e, t = !1) { let o; this.wrapper.querySelector("#dialog-box") && this.close(), this.wrapper.style.display = "", t || (o = addElement("div", { id: "btn-close" })); let i = addElement("div", { id: "backdrop", onclick: () => t ? {} : this.close() }), r = addElement("div", { id: "dialog-box" }); r.appendChild(addElement("h2", { id: "dialog-title", textContent: n })), r.appendChild(addElement("div", { id: "dialog-body" })).appendChild(addElement("div", { innerHTML: e })), this.wrapper.append(i, r), o && (r.querySelector("#dialog-title").append(o), r.querySelector("#btn-close").onclick = () => this.close()), this.wrapper.querySelector("#close") && (this.wrapper.querySelector("#close").onclick = () => this.close()) } } customElements.define("modal-dialog", ModalDialog); class TabMenu extends HTMLElement { constructor() { super(), this.attachShadow({ mode: "open" }), this.wrapper = addElement("div", { id: "wrapper" }), this.header = addElement("header", { id: "tabs" }), this.open = !this.hasAttribute("closed"), this.divs = [], [this.backgroundColor, this.inactiveBackgroundColor] = this.#n(), this.color = this.style.color, this.wrapper.appendChild(this.header) } connectedCallback() { const n = addElement("style", { textContent: `\n                a[id^="tab-"] {\n                    padding: .25rem .5rem;\n                    border-radius: 3px 3px 0 0;\n                    background-color: ${this.inactiveBackgroundColor};\n                    color: ${this.color};\n                    cursor: pointer;\n                    user-select: none;\n                }\n\n                a[id^="tab-"]:hover {\n                    background-color: ${this.backgroundColor};\n                }\n\n                a[id^="tab-"].open {\n                    background-color: ${this.backgroundColor};\n                }\n\n                #tabs {\n                    display: flex;\n                    gap: .25rem;\n                    padding: 0 .25rem;\n                    border-bottom: solid 1px ${this.backgroundColor};\n                    color: ${this.color};\n                }\n\n                #tabs.minimized {\n                    border-bottom: solid 1px ${this.inactiveBackgroundColor};\n                }\n\n                #wrapper {\n                    display: flex;\n                    flex-direction: column;\n                    margin: 1rem 0;\n                }\n\n                #wrapper>div:not(:first-child) {\n                    display: none;\n                    padding: 1rem;\n                    box-sizing: border-box;\n                    background-color: ${this.backgroundColor};\n                    color: ${this.color};\n                }\n\n                #wrapper>div:not(:first-child).open {\n                    display: block\n                }\n\n                #wrapper .disabled {\n                    opacity: .25;\n                    cursor: not-allowed;\n                }\n            ` }); Object.entries(this.children).forEach((([n, e]) => { let t = addElement("a", { id: `tab-${n}`, textContent: `${this.hasAttribute("numbered") ? `${n}: ` : ""}${e.getAttribute("name")}`, onclick: () => e.hasAttribute("disabled") ? {} : e.classList.contains("open") ? this.minimize() : this.openTab(n) }); e.hasAttribute("disabled") && t.classList.add("disabled"), this.header.appendChild(t), this.wrapper.appendChild(e), this.divs.push([t, e]) })), this.open && this.openTab(this.getTab(this.getAttribute("open"))), this.shadowRoot.append(n, this.wrapper) } getTab(n) { return n ? this.divs.findIndex((([e, t]) => t.getAttribute("name") == n)) : 0 } minimize() { this.header.classList.add("minimized"), this.divs.forEach((([n, e]) => { n.classList.remove("open"), e.classList.remove("open") })) } openTab(n) { this.header.classList.remove("minimized"), this.divs.forEach((([e, t]) => { t == this.divs[n][1] ? (e.classList.add("open"), t.classList.add("open")) : (e.classList.remove("open"), t.classList.remove("open")) })) } #n() { const n = "rgba(200, 200, 200, 1)", e = /[\d\.]+/g, t = this.style.backgroundColor.match(e) || n.match(e), o = t ? t.map(Number) : n, i = o.length > 3 ? o.pop() : 1; return [`rgba(${o.join(", ")}, ${i})`, `rgba(${o.join(", ")}, ${Math.max(0, i - .2)})`] } } customElements.define("tab-menu", TabMenu);